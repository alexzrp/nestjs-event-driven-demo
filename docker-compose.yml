# default demo stack: steady workflow
version: '3.8'

services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 100M
        reservations:
          cpus: '0.25'
          memory: 64M
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    ports:
      - "3000:3000"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 64M
#    ports:
#      - "6379:6379"

  app:
    profiles:
      - app
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: builder
    image: nestjs-event-driven-demo:latest
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 64M
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    volumes:
      - .:/app
      - node:/app/node_modules

  cron:
    profiles:
      - cron
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: builder
    image: nestjs-event-driven-demo:latest
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 64M
    depends_on:
      - redis
    environment:
      - CONTAINER_ROLE=cron
      - REDIS_HOST=redis
    volumes:
      - .:/app
      - node:/app/node_modules

  worker:
    profiles:
      - worker
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: builder
    image: nestjs-event-driven-demo:latest
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 64M
    depends_on:
      - redis
    environment:
      - CONTAINER_ROLE=worker
      - REDIS_HOST=redis
    volumes:
      - .:/app
      - node:/app/node_modules

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"

volumes:
  node:
